// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(cuid())
  email        String         @unique
  name         String
  password     String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  LockerRental LockerRental[]
}

model Admin {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  modules   Module[]
}

model RegistrationCode {
  id        String   @id @default(cuid())
  code      String   @unique @default(cuid())
  isUsed    Boolean  @default(false)
  expiresAt DateTime @default(dbgenerated("(now() + interval '1 day')"))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Module {
  id          String   @id @default(cuid())
  name        String
  deviceId    String   @unique
  description String?
  location    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  admin       Admin?   @relation(fields: [adminId], references: [id])
  adminId     String?
  lockers     Locker[]
}

model Locker {
  id           String         @id @default(cuid())
  lockerId     String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  module       Module         @relation(fields: [moduleId], references: [id])
  moduleId     String
  LockerRental LockerRental[]
}

model LockerRental {
  id        String    @id @default(cuid())
  lockerId  String
  nfcCode   String
  userId    String
  startDate DateTime  @default(now())
  endDate   DateTime?
  locker    Locker    @relation(fields: [lockerId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
}
